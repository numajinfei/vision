// Grab.cpp
/*
    Note: Before getting started, Basler recommends reading the "Programmer's Guide" topic
    in the pylon C++ API documentation delivered with pylon.
    If you are upgrading to a higher major version of pylon, Basler also
    strongly recommends reading the "Migrating from Previous Versions" topic in the pylon C++ API documentation.

    This sample illustrates how to grab and process images using the CInstantCamera class.
    The images are grabbed and processed asynchronously, i.e.,
    while the application is processing a buffer, the acquisition of the next buffer is done
    in parallel.

    The CInstantCamera class uses a pool of buffers to retrieve image data
    from the camera device. Once a buffer is filled and ready,
    the buffer can be retrieved from the camera object for processing. The buffer
    and additional image data are collected in a grab result. The grab result is
    held by a smart pointer after retrieval. The buffer is automatically reused
    when explicitly released or when the smart pointer object is destroyed.
*/

// Include files to use the pylon API.
#include <pylon/PylonIncludes.h>
#include "../include/ConfigurationEventPrinter.h"
#include <pylon/SoftwareTriggerConfiguration.h> //CSoftwareTriggerConfiguration
#include "../include/ImageEventPrinter.h"//CImageEventPrinter
// #include <pylon/IntegerParameter.h>
#ifdef PYLON_WIN_BUILD
#    include <pylon/PylonGUI.h>
#endif

// Namespace for using pylon objects.
using namespace Pylon;

// Namespace for using GenApi objects.
using namespace GenApi;


// Namespace for using cout.
using namespace std;

// void setAcquisitionFrameRate(CInstantCamera& camera, const float& rate);
// void setImageROI(CInstantCamera& camera, const int width1, const int height1, const int offX, const int offY);
// void setPixelFormat(CInstantCamera& camera, const std::string& format);
// void setGain(CInstantCamera& camera, float percent);


void setAcquisitionFrameRate(CInstantCamera& camera, const float& rate)
{
    // camera.AcquisitionFrameRateEnabled.SetValue(true);
    // camera.AcquisitionFrameRateAbs.SetValue(rate);

    INodeMap& nodemap = camera.GetNodeMap();
    // Set the upper limit of the camera's frame rate to 30 fps
    CBooleanParameter(nodemap, "AcquisitionFrameRateEnable").SetValue(true);
    CFloatParameter(nodemap, "AcquisitionFrameRateAbs").SetValue(30.0);
}

void setImageROI(CInstantCamera& camera, const int width1, const int height1, const int offX, const int offY)
{
    INodeMap& nodemap = camera.GetNodeMap();

    // // Set the width to the maximum value
    // int64_t maxWidth = CIntegerParameter(nodemap, "Width").GetMax();
    // std::cout << "maxWidth is:" << maxWidth << std::endl;
    // CIntegerParameter(nodemap, "Width").SetValue(width1);
    // // Set the height to 500
    // CIntegerParameter(nodemap, "Height").SetValue(height1);
    // // Set the offset to 0,0
    // CIntegerParameter(nodemap, "OffsetX").SetValue(offX);
    // CIntegerParameter(nodemap, "OffsetY").SetValue(offY);


    // Get the integer nodes describing the AOI.
    CIntegerParameter offsetX( nodemap, "OffsetX" );
    CIntegerParameter offsetY( nodemap, "OffsetY" );
    CIntegerParameter width( nodemap, "Width" );
    CIntegerParameter height( nodemap, "Height" );

    // On some cameras, the offsets are read-only.
    // Therefore, we must use "Try" functions that only perform the action
    // when parameters are writable. Otherwise, we would get an exception.
    offsetX.TrySetToMinimum();
    offsetY.TrySetToMinimum();

    // Some properties have restrictions.
    // We use API functions that automatically perform value corrections.
    // Alternatively, you can use GetInc() / GetMin() / GetMax() to make sure you set a valid value.
    width.SetValue( width1, IntegerValueCorrection_Nearest );
    height.SetValue( height1, IntegerValueCorrection_Nearest );

    cout << "OffsetX          : " << offsetX.GetValue() << endl;
    cout << "OffsetY          : " << offsetY.GetValue() << endl;
    cout << "Width            : " << width.GetValue() << endl;
    cout << "Height           : " << height.GetValue() << endl;

}

void setPixelFormat(CInstantCamera& camera, const std::string& format)
{
    INodeMap& nodemap = camera.GetNodeMap();
    // Access the PixelFormat enumeration type node.
    CEnumParameter pixelFormat( nodemap, "PixelFormat" );

    // Remember the current pixel format.
    String_t oldPixelFormat = pixelFormat.GetValue();
    cout << "Old PixelFormat  : " << oldPixelFormat << endl;

    // Set the pixel format to Mono8 if available.
    if (pixelFormat.CanSetValue( format.c_str() ))
    {
        pixelFormat.SetValue( format.c_str() );
        cout << "New PixelFormat  : " << pixelFormat.GetValue() << endl;
    }
}

void setGain(CInstantCamera& camera, float percent)
{
    INodeMap& nodemap = camera.GetNodeMap();

    // Set the new gain to 50% ->  Min + ((Max-Min) / 2).
    //
    // Note: Some newer camera models may have auto functions enabled.
    //       To be able to set the gain value to a specific value
    //       the Gain Auto function must be disabled first.
    // Access the enumeration type node GainAuto.
    // We use a "Try" function that only performs the action if the parameter is writable.
    CEnumParameter gainAuto( nodemap, "GainAuto" );
    gainAuto.TrySetValue( "Off" );

    // Check to see which Standard Feature Naming Convention (SFNC) is used by the camera device.
    if (camera.GetSfncVersion() >= Sfnc_2_0_0)
    {
        // Access the Gain float type node. This node is available for USB camera devices.
        // USB camera devices are compliant to SFNC version 2.0.
        CFloatParameter gain( nodemap, "Gain" );
        gain.SetValuePercentOfRange( percent );
        cout << "Gain (50%)       : " << gain.GetValue() << " (Min: " << gain.GetMin() << "; Max: " << gain.GetMax() << ")" << endl;
    }
    else
    {
        // Access the GainRaw integer type node. This node is available for IIDC 1394 and GigE camera devices.
        CIntegerParameter gainRaw( nodemap, "GainRaw" );
        gainRaw.SetValuePercentOfRange( percent );
        cout << "Gain (50%)       : " << gainRaw.GetValue() << " (Min: " << gainRaw.GetMin() << "; Max: " << gainRaw.GetMax() << "; Inc: " << gainRaw.GetInc() << ")" << endl;
    }

}

void setExposureTime(CInstantCamera& camera, const float& time)//TODO:verify
{
    INodeMap& nodemap = camera.GetNodeMap();
    // Determine the current exposure time
    double d = CFloatParameter(nodemap, "ExposureTime").GetValue();
    std::cout << " current exposure time : " << d << endl;

    // Set the exposure time to 3500 microseconds
    CFloatParameter(nodemap, "ExposureTime").SetValue(time);
    cout << "Setting exposure time: " << CFloatParameter(nodemap, "ExposureTime").GetValue() << endl;
}


void setHardwareTrigger(CInstantCamera& camera)
{
    INodeMap& nodemap = camera.GetNodeMap();

    //1. Line mode:
    // Get the current line mode
    String_t e = CEnumParameter(nodemap, "LineMode").GetValue();
    cout << "LineMode0 : " << e << endl;
    // Select GPIO line 3
    CEnumParameter(nodemap, "LineSelector").SetValue("Line1");
    // Set the line mode to Input,Output or InOut
    CEnumParameter(nodemap, "LineMode").SetValue("Input");
    // Get the current line mode
    e = CEnumParameter(nodemap, "LineMode").GetValue();
    cout << "LineMode1 : " << e << endl;

    //2.Line Debouncer 硬件触发信号消抖设置 daA1920-160um不支持
    // INodeMap& nodemap = camera.GetNodeMap();
    // // Select the desired input line
    // CEnumParameter(nodemap, "LineSelector").SetValue("Line1");
    // // Set the parameter value to 10 microseconds
    // CFloatParameter(nodemap, "LineDebouncerTime").SetValue(10.0);

    //3. trigger source
    // Select the Frame Start trigger
    CEnumParameter triggerSelector( nodemap, "TriggerSelector" );
    // CEnumParameter(nodemap, "TriggerSelector").SetValue("FrameStart");
    if (!triggerSelector.CanSetValue( "FrameStart" ))
    {
        if (!triggerSelector.CanSetValue( "AcquisitionStart" ))
        {
            throw RUNTIME_EXCEPTION( "Could not select trigger. Neither FrameStart nor AcquisitionStart is available." );
        }
    }
    // Set the trigger source to Line 1
    CEnumParameter(nodemap, "TriggerSource").SetValue("Line1");

    //4. Trigger Action:RisingEdge,FallingEdge,AnyEdge,LevelHigh,LevelLow
    CEnumParameter(nodemap, "TriggerActivation").SetValue("FallingEdge");

    //5. Trigger Delay
    // Set the delay for the frame start trigger to 100 µs
    CIntegerParameter(nodemap, "TriggerDelay").SetValue(100);
}
// void setTrigger(CInstantCamera& camera, )

void setAcquisitionMode(CInstantCamera& camera)
{
    INodeMap& nodemap = camera.GetNodeMap();
    // Configure single frame acquisition on the camera:SingleFrame,Continuous
    CEnumParameter(nodemap, "AcquisitionMode").SetValue("SingleFrame");
}

void start(CInstantCamera& camera)
{
    INodeMap& nodemap = camera.GetNodeMap();
    CEnumParameter triggerSelector( nodemap, "TriggerSelector" );
    CEnumParameter triggerMode( nodemap, "TriggerMode" );

    // Activate trigger.
    triggerMode.SetValue( "On" );

    
    //Acquisition:AcquisitionStart,Stop,Abort
    triggerSelector.SetValue( "AcquisitionStart" );
}

void getDeviceTemperature(CInstantCamera& camera, double& temperature)//TODO:verify
{
    // INodeMap& nodemap = camera.GetNodeMap();
    // // Get the current temperature state
    // String_t e = CEnumParameter(nodemap, "TemperatureState").GetValue();
    // // Get the maximum temperature the camera reached during operation
    // double temperatureMax = CFloatParameter(nodemap, "BslTemperatureMax").GetValue();
    // // Determine how often the temperature state changed to Error
    // int64_t i = CIntegerParameter(nodemap, "BslTemperatureStatusErrorCount").GetValue();


    INodeMap& nodemap = camera.GetNodeMap();
    // Get the current device temperature
    temperature = CFloatParameter(nodemap, "DeviceTemperature").GetValue();
}



// Number of images to be grabbed.
static const uint32_t c_countOfImagesToGrab = 10;

namespace Pylon
{
class ConfigBasler
{
public:
    ConfigBasler(CInstantCamera& camera) : nodemap_(camera.GetNodeMap())
    {        
    }

    void setAcquisitionFrameRate(double frameRate)
    {
        CBooleanParameter(nodemap_, "AcquisitionFrameRateEnable").SetValue(true);
        CFloatParameter(nodemap_, "AcquisitionFrameRateAbs").SetValue(frameRate);
    }

    void setImageROI(const int width, const int height, const int offsetX, const int offsetY)
    {
        // Get the integer nodes describing the AOI.
        CIntegerParameter offsetX_( nodemap_, "OffsetX" );
        CIntegerParameter offsetY_( nodemap_, "OffsetY" );
        CIntegerParameter width_( nodemap_, "Width" );
        CIntegerParameter height_( nodemap_, "Height" );

        // On some cameras, the offsets are read-only.
        // Therefore, we must use "Try" functions that only perform the action
        // when parameters are writable. Otherwise, we would get an exception.
        offsetX_.TrySetToMinimum();
        offsetY_.TrySetToMinimum();

        // Some properties have restrictions.
        // We use API functions that automatically perform value corrections.
        // Alternatively, you can use GetInc() / GetMin() / GetMax() to make sure you set a valid value.
        width_.SetValue( width, IntegerValueCorrection_Nearest );
        height_.SetValue( height, IntegerValueCorrection_Nearest );

        cout << "OffsetX          : " << offsetX_.GetValue() << endl;
        cout << "OffsetY          : " << offsetY_.GetValue() << endl;
        cout << "Width            : " << width_.GetValue() << endl;
        cout << "Height           : " << height_.GetValue() << endl;   
    }

    void setPixelFormat(const std::string& format)
    {
        // Access the PixelFormat enumeration type node.
        CEnumParameter pixelFormat( nodemap_, "PixelFormat" );

        // Remember the current pixel format.
        String_t oldPixelFormat = pixelFormat.GetValue();
        cout << "Old PixelFormat  : " << oldPixelFormat << endl;

        // Set the pixel format to Mono8 if available.
        if (pixelFormat.CanSetValue( format.c_str() ))
        {
            pixelFormat.SetValue( format.c_str() );
            cout << "New PixelFormat  : " << pixelFormat.GetValue() << endl;
        }
    }

/*
    void setGain(float percent)
    {
        // Set the new gain to 50% ->  Min + ((Max-Min) / 2).
        //
        // Note: Some newer camera models may have auto functions enabled.
        //       To be able to set the gain value to a specific value
        //       the Gain Auto function must be disabled first.
        // Access the enumeration type node GainAuto.
        // We use a "Try" function that only performs the action if the parameter is writable.
        CEnumParameter gainAuto( nodemap_, "GainAuto" );
        gainAuto.TrySetValue( "Off" );

        // Check to see which Standard Feature Naming Convention (SFNC) is used by the camera device.
        if (camera.GetSfncVersion() >= Sfnc_2_0_0)
        {
            // Access the Gain float type node. This node is available for USB camera devices.
            // USB camera devices are compliant to SFNC version 2.0.
            CFloatParameter gain( nodemap_, "Gain" );
            gain.SetValuePercentOfRange( percent );
            cout << "Gain (50%)       : " << gain.GetValue() << " (Min: " << gain.GetMin() << "; Max: " << gain.GetMax() << ")" << endl;
        }
        else
        {
            // Access the GainRaw integer type node. This node is available for IIDC 1394 and GigE camera devices.
            CIntegerParameter gainRaw( nodemap_, "GainRaw" );
            gainRaw.SetValuePercentOfRange( percent );
            cout << "Gain (50%)       : " << gainRaw.GetValue() << " (Min: " << gainRaw.GetMin() << "; Max: " << gainRaw.GetMax() << "; Inc: " << gainRaw.GetInc() << ")" << endl;
        }

    }
*/

    void setExposureTime(const float& time)//TODO:verify
    {
        // Determine the current exposure time
        double d = CFloatParameter(nodemap_, "ExposureTime").GetValue();
        std::cout << " current exposure time : " << d << endl;

        // Set the exposure time to 3500 microseconds
        CFloatParameter(nodemap_, "ExposureTime").SetValue(time);
        cout << "Setting exposure time: " << CFloatParameter(nodemap_, "ExposureTime").GetValue() << endl;
    }

    void setAcquisitionMode(const string& acquisitionMode)
    {
        // INodeMap& nodemap = camera.GetNodeMap();
        // Configure single frame acquisition on the camera:SingleFrame,Continuous
        CEnumParameter(nodemap_, "AcquisitionMode").SetValue(acquisitionMode.c_str() );
    }

    void setHardwareTrigger(const string& linex, const string& triggerEdge)
    {
        // INodeMap& nodemap = camera.GetNodeMap();

        //1. Line mode:
        // Get the current line mode
        String_t e = CEnumParameter(nodemap_, "LineMode").GetValue();
        cout << "LineMode0 : " << e << endl;
        // Select GPIO line 3
        CEnumParameter(nodemap_, "LineSelector").SetValue(linex.c_str());
        // Set the line mode to Input,Output or InOut
        CEnumParameter(nodemap_, "LineMode").SetValue("Input");
        // Get the current line mode
        e = CEnumParameter(nodemap_, "LineMode").GetValue();
        cout << "LineMode1 : " << e << endl;

        //2.Line Debouncer 硬件触发信号消抖设置 daA1920-160um不支持
        // INodeMap& nodemap = camera.GetNodeMap();
        // // Select the desired input line
        // CEnumParameter(nodemap, "LineSelector").SetValue("Line1");
        // // Set the parameter value to 10 microseconds
        // CFloatParameter(nodemap, "LineDebouncerTime").SetValue(10.0);

        //3. trigger source
        // Select the Frame Start trigger
        CEnumParameter triggerSelector( nodemap_, "TriggerSelector" );
        // CEnumParameter(nodemap, "TriggerSelector").SetValue("FrameStart");
        if (!triggerSelector.CanSetValue( "FrameStart" ))
        {
            if (!triggerSelector.CanSetValue( "AcquisitionStart" ))
            {
                throw RUNTIME_EXCEPTION( "Could not select trigger. Neither FrameStart nor AcquisitionStart is available." );
            }
        }
        // Set the trigger source to Line 1
        CEnumParameter(nodemap_, "TriggerSource").SetValue(linex.c_str());

        //4. Trigger Action:RisingEdge,FallingEdge,AnyEdge,LevelHigh,LevelLow
        CEnumParameter(nodemap_, "TriggerActivation").SetValue(triggerEdge.c_str());

        //5. Trigger Delay
        // Set the delay for the frame start trigger to 100 µs
        CIntegerParameter(nodemap_, "TriggerDelay").SetValue(100);
    }

    void setSoftwareTrigger()
    {
        // Disable all trigger types except the trigger type used for triggering the acquisition of
        // frames.        
        {
            // Get required enumerations.
            CEnumParameter triggerSelector( nodemap_, "TriggerSelector" );
            CEnumParameter triggerMode( nodemap_, "TriggerMode" );

            // Check the available camera trigger mode(s) to select the appropriate one: acquisition start trigger mode
            // (used by older cameras, i.e. for cameras supporting only the legacy image acquisition control mode;
            // do not confuse with acquisition start command) or frame start trigger mode
            // (used by newer cameras, i.e. for cameras using the standard image acquisition control mode;
            // equivalent to the acquisition start trigger mode in the legacy image acquisition control mode).
            String_t triggerName( "FrameStart" );
            if (!triggerSelector.CanSetValue( triggerName ))
            {
                triggerName = "AcquisitionStart";
                if (!triggerSelector.CanSetValue( triggerName ))
                {
                    throw RUNTIME_EXCEPTION( "Could not select trigger. Neither FrameStart nor AcquisitionStart is available." );
                }
            }

            // Get all enumeration entries of trigger selector.
            StringList_t triggerSelectorEntries;
            triggerSelector.GetSettableValues( triggerSelectorEntries );

            // Turn trigger mode off for all trigger selector entries except for the frame trigger given by triggerName.
            for (StringList_t::const_iterator it = triggerSelectorEntries.begin(); it != triggerSelectorEntries.end(); ++it)
            {
                // Set trigger mode to off.
                triggerSelector.SetValue( *it );
                if (triggerName == *it)
                {
                    // Activate trigger.
                    triggerMode.SetValue( "On" );

                    // The trigger source must be set to 'Software'.
                    CEnumParameter( nodemap_, "TriggerSource" ).SetValue( "Software" );

                    //// Alternative hardware trigger configuration:
                    //// This configuration can be copied and modified to create a hardware trigger configuration.
                    //// Remove setting the 'TriggerSource' to 'Software' (see above) and
                    //// use the commented lines as a starting point.
                    //// The camera user's manual contains more information about available configurations.
                    //// The Basler pylon Viewer tool can be used to test the selected settings first.

                    // // Select the desired input line
                    // CEnumParameter(nodemap, "LineSelector").SetValue("Line1");
                    // // Set the parameter value to 10 microseconds
                    // CFloatParameter(nodemap, "LineDebouncerTime").SetValue(10.0);
                    // // The trigger source must be set to the trigger input, e.g. 'Line1'.
                    // CEnumParameter(nodemap, "TriggerSource").SetValue("Line1");

                    // //The trigger activation must be set to e.g. 'RisingEdge'.
                    // CEnumParameter(nodemap, "TriggerActivation").SetValue("RisingEdge");
                    // // Set the delay for the frame start trigger to 300 µs
                    // CFloatParameter(nodemap, "TriggerDelayAbs").SetValue(100.0);
                }
                else
                {
                    triggerMode.TrySetValue( "Off" );
                }
            }
            // Finally select the frame trigger type (resp. acquisition start type
            // for older cameras). Issuing a software trigger will now trigger
            // the acquisition of a frame.
            triggerSelector.SetValue( triggerName );
        }
    }

private:
    INodeMap& nodemap_;
};

class CHardwareTriggerConfiguration : public CConfigurationEventHandler
{
public:
    /// Apply software trigger configuration.
    static void ApplyConfiguration( GENAPI_NAMESPACE::INodeMap& nodemap )
    {
        using namespace GENAPI_NAMESPACE;

        //Disable compression mode.
        CConfigurationHelper::DisableCompression( nodemap );

        //Disable GenDC streaming.
        CConfigurationHelper::DisableGenDC( nodemap );

        //Select image component.
        CConfigurationHelper::SelectRangeComponent( nodemap );

        // Disable all trigger types except the trigger type used for triggering the acquisition of
        // frames.
        {
            // Get required enumerations.
            CEnumParameter triggerSelector( nodemap, "TriggerSelector" );
            CEnumParameter triggerMode( nodemap, "TriggerMode" );

            // Check the available camera trigger mode(s) to select the appropriate one: acquisition start trigger mode
            // (used by older cameras, i.e. for cameras supporting only the legacy image acquisition control mode;
            // do not confuse with acquisition start command) or frame start trigger mode
            // (used by newer cameras, i.e. for cameras using the standard image acquisition control mode;
            // equivalent to the acquisition start trigger mode in the legacy image acquisition control mode).
            String_t triggerName( "FrameStart" );
            if (!triggerSelector.CanSetValue( triggerName ))
            {
                triggerName = "AcquisitionStart";
                if (!triggerSelector.CanSetValue( triggerName ))
                {
                    throw RUNTIME_EXCEPTION( "Could not select trigger. Neither FrameStart nor AcquisitionStart is available." );
                }
            }

            // Get all enumeration entries of trigger selector.
            StringList_t triggerSelectorEntries;
            triggerSelector.GetSettableValues( triggerSelectorEntries );

            // Turn trigger mode off for all trigger selector entries except for the frame trigger given by triggerName.
            for (StringList_t::const_iterator it = triggerSelectorEntries.begin(); it != triggerSelectorEntries.end(); ++it)
            {
                // Set trigger mode to off.
                triggerSelector.SetValue( *it );
                if (triggerName == *it)
                {
                    // Activate trigger.
                    triggerMode.SetValue( "On" );
cout << "run here..." << endl;
                    // The trigger source must be set to 'Software'.
                    CEnumParameter( nodemap, "TriggerSource" ).SetValue( "Software" );

                    //// Alternative hardware trigger configuration:
                    //// This configuration can be copied and modified to create a hardware trigger configuration.
                    //// Remove setting the 'TriggerSource' to 'Software' (see above) and
                    //// use the commented lines as a starting point.
                    //// The camera user's manual contains more information about available configurations.
                    //// The Basler pylon Viewer tool can be used to test the selected settings first.

                    //// The trigger source must be set to the trigger input, e.g. 'Line1'.
                    //CEnumParameter(nodemap, "TriggerSource").SetValue("Line1");

                    ////The trigger activation must be set to e.g. 'RisingEdge'.
                    //CEnumParameter(nodemap, "TriggerActivation").SetValue("RisingEdge");
                }
                else
                {
                    triggerMode.TrySetValue( "Off" );
                }
            }
            // Finally select the frame trigger type (resp. acquisition start type
            // for older cameras). Issuing a software trigger will now trigger
            // the acquisition of a frame.
            triggerSelector.SetValue( triggerName );
        }


        //Set acquisition mode to "continuous"
        CEnumParameter( nodemap, "AcquisitionMode" ).SetValue( "Continuous" );
    }

    static void ApplyConfiguration1( CInstantCamera& camera )
    {
        //Disable compression mode.
        CConfigurationHelper::DisableCompression( camera.GetNodeMap() );
        //Disable GenDC streaming.
        CConfigurationHelper::DisableGenDC( camera.GetNodeMap() );
        //Select image component.
        CConfigurationHelper::SelectRangeComponent( camera.GetNodeMap() );

        ConfigBasler configBasler(camera);
        configBasler.setAcquisitionFrameRate(90.0);
        configBasler.setImageROI(800, 600, 0, 0);
        configBasler.setPixelFormat("Mono8");
        configBasler.setHardwareTrigger("line1", "FallingEdge");
        configBasler.setAcquisitionMode("SingleFrame");
        
    }

    //Set basic camera settings.
    virtual void OnOpened( CInstantCamera& camera )
    {
        try
        {
            ApplyConfiguration( camera.GetNodeMap() );
            // ApplyConfiguration1(camera);
        }
        catch (const GenericException& e)
        {
            throw RUNTIME_EXCEPTION( "Could not apply configuration. Pylon::GenericException caught in OnOpened method msg=%hs", e.what() );
        }
        catch (const std::exception& e)
        {
            throw RUNTIME_EXCEPTION( "Could not apply configuration. std::exception caught in OnOpened method msg=%hs", e.what() );
        }
        catch (...)
        {
            throw RUNTIME_EXCEPTION( "Could not apply configuration. Unknown exception caught in OnOpened method." );
        }
    }
};

//Example of an image event handler.
class CSampleImageEventHandler : public CImageEventHandler
{
public:
    virtual void OnImagesSkipped( CInstantCamera& camera, size_t countOfSkippedImages )
    {
        std::cout << "OnImagesSkipped event for device " << camera.GetDeviceInfo().GetModelName() << std::endl;
        std::cout << countOfSkippedImages << " images have been skipped." << std::endl;
        std::cout << std::endl;
    }

    void OnImageGrabbed( CInstantCamera& camera, const CGrabResultPtr& ptrGrabResult )
    {
        cout << "CSampleImageEventHandler::OnImageGrabbed called." << std::endl;

        //Image grabbed successfully?
        if (ptrGrabResult->GrabSucceeded())
        {
            // Access the image data.
            cout << "SizeX: " << ptrGrabResult->GetWidth() << endl;
            cout << "SizeY: " << ptrGrabResult->GetHeight() << endl;
            const uint8_t* pImageBuffer = (uint8_t*) ptrGrabResult->GetBuffer();
            cout << "Gray value of first pixel: " << (uint32_t) pImageBuffer[0] << endl << endl;
            cout << "use device:" << camera.GetDeviceInfo().GetFullName() << endl;
            #ifdef PYLON_WIN_BUILD
                // Display the grabbed image.
                Pylon::DisplayImage( 1, ptrGrabResult );
            #endif
        }
        else
        {
            cout << "Error: " << std::hex << ptrGrabResult->GetErrorCode() << std::dec << " " << ptrGrabResult->GetErrorDescription() << endl;
        }
    }
};

}

// /*
int main( void )
{
    // The exit code of the sample application.
    int exitCode = 0;

    // Before using any pylon methods, the pylon runtime must be initialized.
    PylonInitialize();

    try
    {        
        CTlFactory& TlFactory = CTlFactory::GetInstance();
        DeviceInfoList_t filter;
        filter.push_back( CDeviceInfo().SetSerialNumber( "0815-0000" ));
        filter.push_back( CDeviceInfo().SetSerialNumber( "0815-0001" ));

        DeviceInfoList_t lstDevices;
        TlFactory.EnumerateDevices( lstDevices, filter);
        cout << "lstDevices.size: " << lstDevices.size() << endl;
        if ( lstDevices.empty() ) {
            throw runtime_error("No devices found!");
        }

        DeviceInfoList_t::const_iterator it;
        for ( it = lstDevices.begin(); it != lstDevices.end(); ++it )
        {
            cout << it->GetFullName() << endl;
        }

        CInstantCameraArray cameras( lstDevices.size());

        for (size_t i = 0; i < cameras.GetSize(); ++i)
        {
            cameras[i].Attach( TlFactory.CreateDevice( lstDevices[i] ) );

            // Print the model name of the camera.
            cout << "Using device: " << i << "-" << cameras[i].GetDeviceInfo().GetFullName() << endl;
        }
        
        // CInstantCameraArray cameras( 1);
        // CInstantCamera camera( CTlFactory::GetInstance().CreateFirstDevice() );
        // cameras[0].Attach( camera );
        // cameras[0].RegisterConfiguration( new CHardwareTriggerConfiguration, RegistrationMode_ReplaceAll, Cleanup_Delete );
        // auto& camera = cameras[0];
        cameras[0].RegisterConfiguration( new CSoftwareTriggerConfiguration, RegistrationMode_ReplaceAll, Cleanup_Delete );
        cameras[0].RegisterConfiguration( new CConfigurationEventPrinter, RegistrationMode_Append, Cleanup_Delete );
        // cameras[0].RegisterImageEventHandler( new CImageEventPrinter, RegistrationMode_Append, Cleanup_Delete );
        cameras[0].RegisterImageEventHandler( new CSampleImageEventHandler, RegistrationMode_Append, Cleanup_Delete );

        cameras[0].Open();
        
        // Can the camera device be queried whether it is ready to accept the next frame trigger?
        if (cameras[0].CanWaitForFrameTriggerReady())
        {
            // Start the grabbing using the grab loop thread, by setting the grabLoopType parameter
            // to GrabLoop_ProvidedByInstantCamera. The grab results are delivered to the image event handlers.
            // The GrabStrategy_OneByOne default grab strategy is used.
            cameras[0].StartGrabbing( GrabStrategy_OneByOne, GrabLoop_ProvidedByInstantCamera );

            // Wait for user input to trigger the camera or exit the program.
            // The grabbing is stopped, the device is closed and destroyed automatically when the camera object goes out of scope.

            bool runLoop = true;
            while (runLoop)
            {
                cout << endl << "Enter \"t\" to trigger the camera or \"e\" to exit and press enter? (t/e) "; cout.flush();

                string userInput;
                getline(cin, userInput);

                for (size_t i = 0; i < userInput.size(); ++i)
                {
                    char key = userInput[i];
                    if ((key == 't' || key == 'T'))
                    {
                        // Execute the software trigger. Wait up to 1000 ms for the camera to be ready for trigger.
                        if (cameras[0].WaitForFrameTriggerReady( 1000, TimeoutHandling_ThrowException ))
                        {
                            cameras[0].ExecuteSoftwareTrigger();
                        }
                    }
                    else if ((key == 'e') || (key == 'E'))
                    {
                        runLoop = false;
                        break;
                    }
                }

                // Wait some time to allow the OnImageGrabbed handler print its output,
                // so the printed text on the console is in the expected order.
                WaitObject::Sleep( 250 );
            }
        }
        else
        {
            // See the documentation of CInstantCamera::CanWaitForFrameTriggerReady() for more information.
            cout << endl << "This sample can only be used with cameras that can be queried whether they are ready to accept the next frame trigger." << endl;
        }
    }
    catch (const GenericException& e)
    {
        // Error handling.
        cerr << "An exception occurred." << endl << e.GetDescription() << endl;
        exitCode = 1;
    }
    catch (const std::exception& e)
    {
        cerr << "An exception occurred." << endl
            << e.what() << endl;
    }

    // Comment the following two lines to disable waiting on exit.
    cerr << endl << "Press enter to exit." << endl;
    while (cin.get() != '\n');

    
    // Releases all pylon resources.
    PylonTerminate();

    return exitCode;
}
// */

/*
int main()
{
    PylonAutoInitTerm autoInitTerm;

    CTlFactory& TlFactory = CTlFactory::GetInstance();

    DeviceInfoList_t filter;
    filter.push_back( CDeviceInfo().SetSerialNumber( "0815-0000" ));
    filter.push_back( CDeviceInfo().SetSerialNumber( "0815-0001" ));

    DeviceInfoList_t lstDevices;
    TlFactory.EnumerateDevices( lstDevices, filter);
    cout << "lstDevices.size: " << lstDevices.size() << endl;
    if ( ! lstDevices.empty() ) {
        DeviceInfoList_t::const_iterator it;
        for ( it = lstDevices.begin(); it != lstDevices.end(); ++it )
        {

            cout << it->GetFullName() << endl;
        }

        CInstantCameraArray cameras( lstDevices.size());

        for (size_t i = 0; i < cameras.GetSize(); ++i)
        {
            cameras[i].Attach( TlFactory.CreateDevice( lstDevices[i] ) );

            // Print the model name of the camera.
            cout << "Using device: " << i << "-" << cameras[i].GetDeviceInfo().GetFullName() << endl;

            // cameras[i].ExposureTime.SetValue(10000);
            // double d = cameras[i].ExposureTime.GetValue();
            // std::cout << "camera[" << i << "]" << " Exposure time:" << d << endl;
        }
            
    }
    else
        cerr << "No devices found!" << endl;

    return 0;
}
*/

